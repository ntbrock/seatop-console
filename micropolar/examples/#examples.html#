<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title></title>
    <script type='text/javascript' src="../lib/d3.js"></script>
    <script type='text/javascript' src="../src/axis.js"></script>
    <script type='text/javascript' src="../src/util.js"></script>
    <script type='text/javascript' src="../src/poly_chart.js"></script>
    <script type='text/javascript' src="../src/bar_chart.js"></script>
    <script type='text/javascript' src="../src/area_chart.js"></script>
    <script type='text/javascript' src="../src/pie_chart.js"></script>
    <script type='text/javascript' src="../src/dot_plot.js"></script>
    <script type='text/javascript' src="../src/line_plot.js"></script>
    <script type='text/javascript' src="../src/tooltip.js"></script>
    <script type='text/javascript' src="../src/legend.js"></script>
    <script type='text/javascript' src="../src/adapter.js"></script>
    <link rel="stylesheet" type="text/css" href="./style.css">
</head>
<body>

<div id="container1"></div>

<script>

/*
changes:
- .render('#container1')
- CONSTANTS (null -> µ.DATAEXTENT, 'areaChart' -> µ.AREA)
 */


// General test suite
var configs = [
    {data:[{t: ['A', 'B', 'C', 'D'], r: [1, 1, 3, 2], geometry: µ.PIE}],
        layout: {title: 'Pie Chart', angularAxis: {gridLinesVisible: false}, radialAxis: {visible: false, gridLinesVisible: false}, showLegend: false}},
    {data:[{t: ['A', 'B', 'B', 'A'], r: [1, 1, 1, 1]}], layout: {needsEndSpacing:false, title: 'A, B, B, A'}},
    {data:[{t: [0, 120, 240, 0], r: [1, 1, 1, 1]}], layout: {needsEndSpacing:false, title: '0, 120, 240, 0'}},
    {data: [{t: d3.range(100).map(function(d, i){ return d*10; }), r: d3.range(100), geometry: µ.LINE}], layout: {title: 'Spiral'}},
    {data: [{t: d3.range(30).map(function(d, i){ return Math.random()*360; }), r: d3.range(30).map(function(d, i){ return Math.random()*100; }), geometry: µ.DOT, name: 'dots1'},
        {t: d3.range(30).map(function(d, i){ return Math.random()*360; }), r: d3.range(30).map(function(d, i){ return Math.random()*100; }), geometry: µ.DOT, name: 'dots2'}], layout: {title: 'Dot Plot'}},
    {data: [{t: [1, 2, 3, 4], r: [1, 2, 3, 4], geometry: µ.LINE}]},
    {data: [{t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.DOT}], layout: {title: '[0, 90, 180, 270]'}},
    {data: [{t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.AREA}], layout: {title: '[0, 90, 180, 270]'}},
    {data: [{t: [-180, -90, 0, 90], r: [10, 20, 30, 40], geometry: µ.DOT}], layout: {title: '[-180, -90, 0, 90]'}},
    {data: [{t: [-180, -90, 0, 90], r: [10, 20, 30, 40], geometry: µ.AREA}], layout: {title: '[-180, -90, 0, 90]'}},
    {data: [{t: ['-180', '-90', '0', '90'], r: [10, 20, 30, 40], geometry: µ.DOT}], layout: {title: "['-180', '-90', '0', '90']"}},
    {data: [{t: ['-180', '-90', '0', '90'], r: [10, 20, 30, 40], geometry: µ.AREA}], layout: {title: "['-180', '-90', '0', '90']"}},
    {data: [{t: [90, 180, 270, 360], r: [10, 20, 30, 40], geometry: µ.DOT}], layout: {title: '[90, 180, 270, 360], data extent', radialAxis: {domain: µ.DATAEXTENT}}},
    {data: [{t: [90, 180, 270, 360], r: [10, 20, 30, 40], geometry: µ.DOT}], layout: {title: '[90, 180, 270, 360], custom extent', radialAxis: {domain: [0, 100]}}},
    {data: [{t: [90, 180, 270, 360], r: [10, 20, 30, 40], geometry: µ.DOT}], layout: {title: '[90, 180, 270, 360], angularExtent', angularAxis: {domain: µ.DATAEXTENT}}},
    {data: [{t: ['A', 'B', 'C', 'D'], r: [10, 20, 30, 40], geometry: µ.DOT}], layout: {title: "['A', 'B', 'C', 'D']"}},
    {data: [{t: ['A', 'B', 'C', 'D'], r: [10, 20, 30, 40], geometry: µ.AREA}], layout: {title: "['A', 'B', 'C', 'D']"}},
    {data: [{t: ['A', 'B', 'C', 'D'], r: [10, 20, 30, 40], geometry: µ.BAR}], layout: {title: "['A', 'B', 'C', 'D']"}},
    {data: [{t: ['A', 'B', 'C', 'D'], r: [10, 20, 30, 40], geometry: µ.LINE, dotVisible: true}], layout: {title: "['A', 'B', 'C', 'D']"}},
    {data: [{t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.BAR}], layout: {title: "[0, 90, 180, 270]"}},
    {data: [{t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.LINE}], layout: {title: "[0, 90, 180, 270]"}},
    {data: [
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.AREA},
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.LINE},
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.BAR},
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.DOT}
        ], layout: {title: "[0, 90, 180, 270]"}},
    {data: [
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.BAR, opacity: 0.5},
            {t: [0, 90, 180, 270], r: [1, 2, 3, 4], geometry: µ.BAR, opacity: 0.5}
        ], layout: {title: "[0, 90, 180, 270] unstacked"}},
    {data: [
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.BAR, opacity: 0.5, groupId: 1},
            {t: [0, 90, 180, 270], r: [1, 2, 3, 4], geometry: µ.BAR, opacity: 0.5, groupId: 1}
        ], layout: {title: "[0, 90, 180, 270] stacked"}},
    {data: [
            {t: [90, 180, 270, 360], r: [10, 20, 30, 40], geometry: µ.BAR, groupId: 1},
            {t: [90, 180, 270, 360], r: [1, 2, 3, 4], geometry: µ.BAR, groupId: 1}
        ],
        layout: {title: '[90, 180, 270, 360], custom extent', radialAxis: {domain: [-20, 50]}}},
    {data: [
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.LINE, lineInterpolation: 'basis', name: 'basis'},
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.LINE, lineInterpolation: 'step', name: 'step'},
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.LINE, lineInterpolation: 'monotone', name: 'monotone'},
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.LINE, lineInterpolation: 'cardinal', name: 'cardinal'},
            {t: [0, 90, 180, 270], r: [10, 20, 30, 40], geometry: µ.LINE, name: 'linear'}
        ],
        layout: {title: "[0, 90, 180, 270] interpolation"}},
];
configs.forEach(function(_config){
    var config = {layout: {width: 300, height: 300}};
    µ.util.deepExtend(config, _config);
    micropolar.Axis().config(config).render(d3.select('body').append('div'));
});

/*

// Symetrized dot pattern
var dataCount = 50;
var dataset = d3.range(dataCount).map(function(d, i){
    return ~~(Math.random()*100);
});

var datasetRepeated = d3.merge([dataset, dataset.reverse(), dataset, dataset.reverse(), dataset]);
var divisor = 360/(dataCount*5);
var angularData = d3.range(dataCount*5).map(function(d, i){ return d*divisor; });

var config = {
    "data": [
        {"t": angularData, "r": datasetRepeated, "name": "Pattern1", "color": "skyblue", "opacity": 0.8, "strokeColor": "aliceblue", "strokeSize": 1, dotSize: 32, "geometry": "DotPlot"}
    ],
    "layout": {
        "title": "Symetrized Dot Pattern", "height": 300, "width": 300,
        "font": {"size": 12, "color": "black", "outlineColor": "white", "family": "Arial"},
        "labelOffset": 10,
        "radialAxis": {"domain": null, "tickOrientation": "horizontal", "orientation": 0},
        "angularAxis": {"domain": [0, 360], "tickOrientation": "horizontal"},
        "minorTicks": 2, "minorTickColor": "grey", "tickColor": "silver",
        "margin": {"top": 60, "right": 10, "bottom": 30, "left": 30, "pad": 0},
        "backgroundColor": "white",
        needsEndSpacing: true
    }
};

micropolar.Axis().config(config).render(d3.select('body').append('div'));

// Wind rose
var config = {
    data: d3.range(5).map(function(d, i){
            return d3.range(8).map(function(d, i){ return ~~(Math.random()*100); });
        })
        .map(function(d, i){
            return {
                t:['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],
                r: d,
                name:"Layer"+i,
                type: 'area'
            };
        }),
    layout: {
            title: 'Polar area chart',
            width: 350,
            height: 350,
            margin: { 'l': 30, 'r': 30, 't': 30, 'b': 30, 'pad': 0 },
            angularAxis: {range: null},
            plot_bgcolor: 'ghostwhite',
            font: {
                family: 'Arial, sans-serif',
                size: 12,
                color: 'grey'
            },
            showlegend: false,
            direction: 'clockwise',
            orientation: 270,
            barmode: 'stack'
        }
};

var translatedConfig = micropolar.adapter.plotly().convert(config);
micropolar.Axis().config(translatedConfig).render(d3.select('body').append('div'));


// Mic patterns example
var config = {
    data:
        [{
            "name": "Figure8",
            "t": [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360],
            "r": [1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1],
            "marker": {
                "color": "none",
                "line": {
                    "color": "peru"
                }
            },
            type: "scatter", mode: "lines"
        }, {
            "name": "Cardioid",
            "t": [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360],
            "r": [1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1],
            "marker": {
                "color": "none",
                "line": {
                    "color": "darkviolet"
                }
            },
            type: "scatter", mode: "lines"
        }, {
            "name": "Hypercardioid",
            "t": [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360],
            "r": [1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1],
            "marker": {
                "color": "none",
                "line": {
                    "color": "deepskyblue"
                }
            },
            type: "scatter", mode: "lines"
        }, {
            "name": "Subcardioid",
            "t": [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360],
            "r": [1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1],
            "marker": {
                "color": "none",
                "line": {
                    "color": "orangered"
                }
            },
            type: "scatter", mode: "lines"
        }, {
            "name": "Supercardioid",
            "t": [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360],
            "r": [1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1],
            "marker": {
                "color": "none",
                "line": {
                    "color": "green"
                }
            },
            type: "scatter", mode: "lines"
        }],
    layout:
        {
            "title": "Mic Patterns",
            "width": 500,
            "height": 500,
            "orientation": -90,
            "angularAxis": {
                "title": "angle"
            },
            "radialAxis": {
                "title": "dB"
            },
            "margin": {
                "l": 40,
                "r": 40,
                "t": 40,
                "b": 20,
                "pad": 0
            },
            "paper_bgcolor": "#fff",
            "plot_bgcolor": "#fff",
            "font": {
                "family": "Arial, sans-serif;",
                "size": 12,
                "color": "#000"
            },
            "showlegend": true,
            "needsEndSpacing": false
        }
};

var translatedConfig = micropolar.adapter.plotly().convert(config);
micropolar.Axis().config(translatedConfig).render(d3.select('body').append('div'));


// Superformula
var config = {
    data:
        [
            {name: 'm:12, n1:.3, n2:0, n3:10',
                t: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200],
                r: [1,1,1,1,1,1,0.99,0.98,0.93,0.84,0.69,0.52,0.36,0.24,0.17,0.12,0.1,0.1,0.11,0.14,0.2,0.3,0.44,0.61,0.77,0.89,0.96,0.99,1,1,1,1,1,1,1,1,1,1,1,1,0.99,0.96,0.89,0.77,0.61,0.44,0.3,0.2,0.14,0.11,0.1,0.1,0.12,0.17,0.24,0.36,0.52,0.69,0.84,0.93,0.98,0.99,1,1,1,1,1,1,1,1,1,1,1,0.99,0.98,0.93,0.84,0.69,0.52,0.36,0.24,0.17,0.12,0.1,0.1,0.11,0.14,0.2,0.3,0.44,0.61,0.77,0.89,0.96,0.99,1,1,1,1,1,1,1,1,1,1,1,1,0.99,0.96,0.89,0.77,0.61,0.44,0.3,0.2,0.14,0.11,0.1,0.1,0.12,0.17,0.24,0.36,0.52,0.69,0.84,0.93,0.98,0.99,1,1,1,1,1,1,1,1,1,1,1,0.99,0.98,0.93,0.84,0.69,0.52,0.36,0.24,0.17,0.12,0.1,0.1,0.11,0.14,0.2,0.3,0.44,0.61,0.77,0.89,0.96,0.99,1,1,1,1,1,1,1,1,1,1,1,1,0.99,0.96,0.89,0.77,0.61,0.44,0.3,0.2,0.14,0.11,0.1,0.1,0.12,0.17,0.24,0.36,0.52,0.69,0.84,0.93,0.98,0.99,1,1,1,1,1] ,
                mode: 'markers',
                type: 'scatter',
                marker: {size: 16, symbol: 'triangle-down', color: 'orange'}},
            {name: 'm:19, n1:100, n2:50, n3:50',
                t: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200],
                r: [0.75,0.99,0.65,0.47,0.38,0.35,0.36,0.41,0.53,0.78,0.92,0.66,0.51,0.43,0.38,0.36,0.35,0.36,0.39,0.45,0.54,0.71,0.99,0.69,0.49,0.39,0.35,0.36,0.4,0.51,0.73,0.97,0.69,0.53,0.44,0.39,0.36,0.35,0.36,0.38,0.44,0.53,0.68,0.95,0.74,0.51,0.4,0.36,0.35,0.39,0.48,0.68,1,0.72,0.55,0.45,0.39,0.36,0.35,0.36,0.38,0.43,0.51,0.65,0.9,0.8,0.54,0.42,0.36,0.35,0.38,0.46,0.64,0.98,0.76,0.57,0.46,0.4,0.37,0.35,0.35,0.37,0.42,0.49,0.62,0.85,0.86,0.57,0.43,0.37,0.35,0.37,0.45,0.6,0.92,0.8,0.6,0.48,0.41,0.37,0.35,0.35,0.37,0.41,0.48,0.6,0.8,0.92,0.6,0.45,0.37,0.35,0.37,0.43,0.57,0.86,0.85,0.62,0.49,0.42,0.37,0.35,0.35,0.37,0.4,0.46,0.57,0.76,0.98,0.64,0.46,0.38,0.35,0.36,0.42,0.54,0.8,0.9,0.65,0.51,0.43,0.38,0.36,0.35,0.36,0.39,0.45,0.55,0.72,1,0.68,0.48,0.39,0.35,0.36,0.4,0.51,0.74,0.95,0.68,0.53,0.44,0.38,0.36,0.35,0.36,0.39,0.44,0.53,0.69,0.97,0.73,0.51,0.4,0.36,0.35,0.39,0.49,0.69,0.99,0.71,0.54,0.45,0.39,0.36,0.35,0.36,0.38,0.43,0.51,0.66,0.92,0.78,0.53,0.41,0.36,0.35,0.38,0.47,0.65,0.99],
                mode: 'markers',
                type: 'scatter',
                opacity: 0.5,
                marker: {symbol: 'cross', line: {color: 'none'}, color: 'skyblue'}},
            {name: 'm:5, n1:2, n2:7, n3:7',
                t: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200],
                r: [1,0.99,0.95,0.9,0.84,0.78,0.72,0.67,0.63,0.59,0.56,0.53,0.5,0.48,0.46,0.45,0.44,0.43,0.43,0.42,0.42,0.42,0.42,0.43,0.44,0.45,0.46,0.48,0.5,0.52,0.55,0.58,0.62,0.66,0.71,0.77,0.83,0.89,0.94,0.98,1,0.99,0.96,0.91,0.85,0.79,0.74,0.68,0.64,0.6,0.56,0.53,0.51,0.49,0.47,0.45,0.44,0.43,0.43,0.42,0.42,0.42,0.42,0.43,0.44,0.45,0.46,0.47,0.49,0.52,0.54,0.58,0.61,0.65,0.7,0.76,0.82,0.88,0.93,0.97,1,1,0.97,0.92,0.86,0.8,0.75,0.69,0.65,0.6,0.57,0.54,0.51,0.49,0.47,0.46,0.44,0.43,0.43,0.42,0.42,0.42,0.42,0.43,0.43,0.44,0.46,0.47,0.49,0.51,0.54,0.57,0.6,0.65,0.69,0.75,0.8,0.86,0.92,0.97,1,1,0.97,0.93,0.88,0.82,0.76,0.7,0.65,0.61,0.58,0.54,0.52,0.49,0.47,0.46,0.45,0.44,0.43,0.42,0.42,0.42,0.42,0.43,0.43,0.44,0.45,0.47,0.49,0.51,0.53,0.56,0.6,0.64,0.68,0.74,0.79,0.85,0.91,0.96,0.99,1,0.98,0.94,0.89,0.83,0.77,0.71,0.66,0.62,0.58,0.55,0.52,0.5,0.48,0.46,0.45,0.44,0.43,0.42,0.42,0.42,0.42,0.43,0.43,0.44,0.45,0.46,0.48,0.5,0.53,0.56,0.59,0.63,0.67,0.72,0.78,0.84,0.9,0.95,0.99],
                mode: 'markers',
                type: 'scatter',
                opacity: 0.8,
                marker: {symbol: 'circle', color: 'lime'}}
        ],
    layout:
        {
            title: 'Superformula',
            width: 500,
            height: 500,
            margin: { l: 20, r: 10, t: 40, b: 20, pad: 0 },
            plot_bgcolor: 'ghostwhite',
            radialAxis: {orientation: -36},
            angularAxis: {range: null},
            font: {
                family: 'Arial, sans-serif',
                size: 12,
                color: 'grey'
            },
            showlegend: true,
            needsEndSpacing: false
        }
};

var translatedConfig = micropolar.adapter.plotly().convert(config);
micropolar.Axis().config(translatedConfig).render(d3.select('body').append('div'));


// Reference
var config = {
    data: [
        {
            t: ['a', 'b', 'c', 'd'], //identical
            r: [5, 10, 15, 20], //identical
            name: 'Layer1', //identical
            type: "area", //geometry: "AreaChart",
            // groupId: 1,  //upolar only instead of layout.barmode
            marker: { //identical, note: abusing marker where plotly uses marker+line
                color: 'lime', //data.color
                line: {
                    color: 'red',  //data.strokeColor
                    dash: 'dash', //data.dash
                    width: 5 //data.strokeSize
                },
                opacity: 0.8 //data.opacity
            },
            showlegend: true, //visibleInLegend
            visible: true //identical
        },
        {t: ['a', 'b', 'c', 'd'], r: [10, 20, 30, 40], name: 'Layer3', type: "bar", color: 'orange'},
        {t: ['a', 'b', 'c', 'd'], r: [10, 20, 30, 40], name: 'Layer4', type: "scatter", mode: "markers", color: 'red', marker: {symbol: 'triangle-down'}},
        {t: ['a', 'b', 'c', 'd'], r: [10, 20, 30, 40], name: 'Layer5', type: "scatter", mode: "lines", color: 'none', marker: {line: {color: 'red'}}},
        {t: ['a', 'b', 'c', 'd'], r: [10, 20, 30, 40], name: 'Layer6', type: "scatter", mode: "lines+markers", color: 'none', marker: {line: {color: 'green'}}}
    ],
    layout: {
        title: 'Title', //identical
        height: 400, //identical
        width: 400, //identical
        font: { //identical
            size: 31, //identical
            color: 'orange', //identical
            outlinecolor: 'red', //upolar only, outlineColor
            family: 'Tahoma, sans-serif' //identical
        },
        direction: 'counterclockwise', //upolar only
        orientation: 10, //identical
        labeloffset: 20, //labelOffset
        radialaxis: { //identical
            range: null, //identical
            orientation: -45, //upolar only
//            rewriteTicks: null, //TODO expose
            ticksuffix: '$', //upolar only, ticksSuffix, to be exposed
            visible: true, //upolar only
            showline: true, //gridLinesVisible
            tickorientation: 'vertical' //upolar only, tickOrientation, != tickangle
        },
        angularaxis: { //identical
            range: null, //identical
            ticksuffix: '%', //upolar only, ticksSuffix, to be exposed
//            rewriteTicks: null, //TODO expose
            visible: true,
            showline: true, //gridLinesVisible
            showticklabels: true, //labelsVisible
            tickorientation: 'angular', //upolar only, tickOrientation, != tickangle
            nticks: null, //ticksCount
//            ticksStep: null, //upolar only, to be verified
            ticklen: 30, //layout.tickLength
            tickcolor: 'orange' // layout.tickColor
        },
//        minorTicks: 2, //upolar only, to be verified
//        minorTickColor: 'lime', //upolar only, to be verified
//        needsEndSpacing: true, //upolar only, to be verified
        defaultcolorrange: d3.scale.category10().range(), //upolar only, defaultColorRange
        opacity: 0.8, //upolar only
        showlegend: true, //showLegend
        legend: {
            traceorder: 'normal' // reverseOrder
        },
        plot_bgcolor: 'ghostwhite', //backgroundColor
        margin: {
            t: 60, //top
            r: 10, //right
            b: 30, // bottom
            l: 30, //left
            pad: 0 //plotly only, unused
        },
        barmode: 'stack' //plotly only (groupId)
    }
};

var translatedConfig = micropolar.adapter.plotly().convert(config);
micropolar.Axis().config(translatedConfig).render(d3.select('body').append('div'));


*/

</script>

</body>
</html>
